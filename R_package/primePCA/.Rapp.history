p <- 20#
n <- 100#
d <- 0#
K <- 2#
set.seed(2020)#
#
X <- matrix(rnorm(n * p), n, p)#
Sigma_hat <- t(X) %*% X / n#
A <- 2 * sqrt(p / K) * svd(Sigma_hat)$u[, 1:K]#
Y <- twoPL_gen(n, p, K, A, d)#
#
A_hat <- getCoef(Y, K)#
statError(A_hat, A)
p <- 100#
n <- 100#
d <- 0#
K <- 2#
set.seed(2020)#
#
X <- matrix(rnorm(n * p), n, p)#
Sigma_hat <- t(X) %*% X / n#
A <- 2 * sqrt(p / K) * svd(Sigma_hat)$u[, 1:K]#
Y <- twoPL_gen(n, p, K, A, d)#
#
A_hat <- getCoef(Y, K)#
statError(A_hat, A)
p <- 10#
n <- 100#
d <- 0#
K <- 2#
set.seed(2020)#
#
X <- matrix(rnorm(n * p), n, p)#
Sigma_hat <- t(X) %*% X / n#
A <- 2 * sqrt(p / K) * svd(Sigma_hat)$u[, 1:K]#
Y <- twoPL_gen(n, p, K, A, d)#
#
A_hat <- getCoef(Y, K)#
statError(A_hat, A)
p <- 10#
n <- 100#
d <- 0#
K <- 2#
set.seed(2021)#
#
X <- matrix(rnorm(n * p), n, p)#
Sigma_hat <- t(X) %*% X / n#
A <- 2 * sqrt(p / K) * svd(Sigma_hat)$u[, 1:K]#
Y <- twoPL_gen(n, p, K, A, d)#
#
A_hat <- getCoef(Y, K)#
statError(A_hat, A)
p <- 10#
n <- 50#
d <- 0#
K <- 2#
set.seed(2021)#
#
X <- matrix(rnorm(n * p), n, p)#
Sigma_hat <- t(X) %*% X / n#
A <- 2 * sqrt(p / K) * svd(Sigma_hat)$u[, 1:K]#
Y <- twoPL_gen(n, p, K, A, d)#
#
A_hat <- getCoef(Y, K)#
statError(A_hat, A)
p <- 10#
n <- 500#
d <- 0#
K <- 2#
set.seed(2021)#
#
X <- matrix(rnorm(n * p), n, p)#
Sigma_hat <- t(X) %*% X / n#
A <- 2 * sqrt(p / K) * svd(Sigma_hat)$u[, 1:K]#
Y <- twoPL_gen(n, p, K, A, d)#
#
A_hat <- getCoef(Y, K)#
statError(A_hat, A)
m <- 10#
index <- sample(n)#
n_small <- n / m#
A_hat_all <- sapply(1:m, function(k){#
	Y_small <- Y[index[(1 + (k - 1) * n_small):(k * n_small)], ]#
	A_hat_small <- getCoef(Y_small, K)#
	return(A_hat_small)#
}, simplify=F)#
sapply(1:m, function(k) statError(A_hat_all[[k]], A))
8
A_hat_sum <- matrix(0, p, p)#
for (A_hat in A_hat_all){#
	A_hat_sum <- A_hat_sum + A_hat %*% t(A_hat)#
}#
A_tilde <- svd(A_hat_sum)$u[, 1:K]#
statError(A_tilde, A)
bootData <- sapply(1:m, function(k){#
	Y_small <- twoPL_gen(100 * n_small, p, K, 2 * sqrt(p / K) * A_hat_all[[k]], d)	#
	return(Y_small)#
}, simplify=FALSE)#
Y_boot <- do.call(rbind, bootData)#
A_boot <- getCoef(Y_boot, K)#
statError(A_boot, A)
?save
p <- 10#
n <- 500#
d <- 0#
K <- 2#
m_all <- c(2, 5, 10)#
#
set.seed(2021)#
X <- matrix(rnorm(n * p), n, p)#
Sigma_hat <- t(X) %*% X / n#
A <- 2 * sqrt(p / K) * svd(Sigma_hat)$u[, 1:K]#
#
n_sim <- 100#
A_full <- list()#
A_sub <- list()
n_sim
for (i in 1:n_sim){#
	set.seed(i)#
	Y <- twoPL_gen(n, p, K, A, d)#
	A_full[[i]] <- getCoef(Y, K)#
	A_sub[[i]] <- list()#
	index <- sample(n)#
	for (m in m_all){#
		n_small <- n / m			#
		A_hat_all <- sapply(1:m, function(k){#
			Y_small <- Y[index[(1 + (k - 1) * n_small):(k * n_small)], ]#
			A_hat_small <- getCoef(Y_small, K)#
			return(A_hat_small)#
		}, simplify=F)		#
		A_sub[[i]][[m]] <- A_hat_all#
	}#
	cat(paste0("The ", i, "th experiment is done."))#
}
A_full
A_sub
for (i in 1:n_sim){#
	set.seed(i)#
	Y <- twoPL_gen(n, p, K, A, d)#
	A_full[[i]] <- getCoef(Y, K)#
	A_sub[[i]] <- list()#
	index <- sample(n)#
	for (m in m_all){#
		n_small <- n / m			#
		A_hat_all <- sapply(1:m, function(k){#
			Y_small <- Y[index[(1 + (k - 1) * n_small):(k * n_small)], ]#
			A_hat_small <- getCoef(Y_small, K)#
			return(A_hat_small)#
		}, simplify=F)		#
		A_sub[[i]][[m]] <- A_hat_all#
	}#
	cat(paste0("The ", i, "th experiment is done."))#
	flush.console()#
}
length(A_sub)
getwd()
save(A_full, A_sub, file="/Users/ziweizhu/Dropbox/Proposals/NSF2019_Ziwei/code/irt/sim.RData")
ls()
for (i in 87:n_sim){#
	set.seed(i)#
	Y <- twoPL_gen(n, p, K, A, d)#
	A_full[[i]] <- getCoef(Y, K)#
	A_sub[[i]] <- list()#
	index <- sample(n)#
	for (m in m_all){#
		n_small <- n / m			#
		A_hat_all <- sapply(1:m, function(k){#
			Y_small <- Y[index[(1 + (k - 1) * n_small):(k * n_small)], ]#
			A_hat_small <- getCoef(Y_small, K)#
			return(A_hat_small)#
		}, simplify=F)		#
		A_sub[[i]][[m]] <- A_hat_all#
	}#
	cat(paste0("The ", i, "th experiment is done."))#
	flush.console()#
}
length(A_full)
\
save(A_full, A_sub, file="/Users/ziweizhu/Dropbox/Proposals/NSF2019_Ziwei/code/irt/sim2.RData")
length(A_sub)
A
p
save(A, p, n, d, K, m_all, A_full, A_sub, file="/Users/ziweizhu/Dropbox/Proposals/NSF2019_Ziwei/code/irt/sim2.RData")
42/ 65
37 / 40
18 + 17
35 / 40
38 / 40
37 / 40
32/ 40
11 / 9 * 11
2/. 9
2 / 9
54.85 / 41.15
80 * 3 / 7
80 * 4 / 7
9 * 4 / 7
9 * 3 / 7
5 * 4 / 7
5 * 3 / 7
16 / 81
4/ 81
1.001 ^ 365
18 / 65
11 / 9 * 12
11 / 9 * 11
11 / 9 * 12 * 7
Sigma = matrix(c(1, -.5, -.5, 1), 2, 2)
Sigma
v = c(2, -1)
v %*% Sigma %*% v
Sigma = matrix(c(1, .5, .5, 1), 2, 2)
v %*% Sigma %*% v
6 + 3 +
``
(0.5 + 2) / 1.5
(0.25 + 1 + 3) / 1.75
(0.0625 + 0.25 + 0.75 + 4) / (1 + 0.25 + 0.125 + 0.0625)
.999 ^ 365
library(rT)
??rT
?rT
rT
?rT
?qr
?qr.Q
96 * 4 / 7
sqrt(0.0002)
sqrt(0.00042)
a
0.02 * 0.14
2 / log(2)
log(2) / 2
1 / sqrt()2
1 / sqrt(2)
8 + 2 * sqrt(2)
0.14 * sqrt(0.00011)
20 * log (2)
1 - exp(-2)
1440 * 400
6 * log(10)
6 * log(10) / log(2)
1 / (8 * sqrt(2)) + 1 / 64
1/ 8
192 * log(2)
exp(1)
install.packages("FNN", dependencies=T)
install.packages("glmnet", dependencies=T)
24 * 7 * 4
138 / 95
139 / 95
0.615 * 24 * 365
229 + 58 + 11.99 + 150 + 449 + 30
547 * 4
5989.71 * 12
5989.71 * 12 + 7879.42 * 3
5989.71  *2
110000 / 12
110000 / 12 * 0.65
110000 / 12 * 0.66
110000 / 12 * 0.65
?model.matrix
?glmnet
c(1:10)
class(c(1:10))
53.15 + 98 * .335
53.15 + 98 * .35
143 / 95
3.4 * 7700
7559 - 6779
8339 - 7559
pnorm(5)
a
?runif
n <- 10#
d <- 2#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, 1)))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) < .5] <- NA#
X
n <- 10#
d <- 2#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, 1)))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X
n <- 16#
d <- 2#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, 1)))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X
v_ipw <- inverse_prob_method(X, 1)
library(softImpute)#
library(primePCA)#
library(Matrix)#
library(svMisc)#
library(primePCA)
v_ipw <- inverse_prob_method(X, 1)
v_ipw
set.seed(2020)#
n <- 16#
d <- 2#
p <- .2#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, 1)))#
X_true <- X %*% Sigma_sqrt
set.seed(2020)#
n <- 16#
d <- 2#
p <- .3#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, 1)))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X#
v_ipw <- inverse_prob_method(X, 1)
v_pwd
v_ipw
set.seed(2020)#
n <- 16#
d <- 2#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, 1)))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X#
v_ipw <- inverse_prob_method(X, 1)
v_ipw
?primePCA
v_prime <- primePCA(X, 1)
v_prime
?primePCA
v_prime <- primePCA(X, 1, thresh_convergence=1e-4)
v_prime
v_ipw
v_ipw <- inverse_prob_method(X, 2)#
v_prime <- primePCA(X, 2, thresh_convergence=1e-4)
v_prime <- primePCA(X, 1, thresh_convergence=1e-4)
v_prime <- primePCA(X, 2, thresh_convergence=1e-4)
primePCA
library(softImpute)#
library(primePCA)#
library(Matrix)#
library(svMisc)
code_file <- "/Users/ziweizhu/Dropbox/Subspace learning/package/primePCA/R/code.R"#
source(code_file)
set.seed(2020)#
n <- 16#
d <- 2#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, 1)))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X#
v_ipw <- inverse_prob_method(X, 2)
v_ipw
a
v_prime <- primePCA(X, 2, thresh_convergence=1e-4)
v_prime <- primePCA(X, 1, thresh_convergence=1e-4)
library(softImpute)#
# library(primePCA)#
library(Matrix)#
library(svMisc)#
#
code_file <- "/Users/ziweizhu/Dropbox/Subspace learning/package/primePCA/R/code.R"#
source(code_file)
set.seed(2020)#
n <- 16#
d <- 2#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, 1)))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X#
v_ipw <- inverse_prob_method(X, 2)
v_ipw
?primePCA
v_prime <- primePCA(X, 1, thresh_convergence=1e-4, trace.it=T)
?gin
?ginv
a
library(MASS)
v_prime <- primePCA(X, 1, thresh_convergence=1e-4, trace.it=T)
v_prime <- primePCA(X, 2, thresh_convergence=1e-4, trace.it=T)
set.seed(2020)#
n <- 16#
d <- 5#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, rep(1, 4))))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X
set.seed(2020)#
n <- 16#
d <- 4#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, rep(1, d - 1))))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X
set.seed(2020)#
n <- 20#
d <- 4#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, rep(1, d - 1))))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X#
v_ipw <- inverse_prob_method(X, 2)#
v_prime <- primePCA(X, 1, thresh_convergence=1e-4, trace.it=T)
v_ipw
a
v_prime
v_ipw <- inverse_prob_method(X, 1)#
v_prime <- primePCA(X, 1, thresh_convergence=1e-4, trace.it=T)
v_ipw
v_prime
v_ipw <- inverse_prob_method(X, 1)#
v_prime <- primePCA(X, 1, thresh_convergence=1e-4, trace.it=T)$V_cur
v_prime
set.seed(1)#
n <- 20#
d <- 4#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(4, rep(1, d - 1))))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X#
v_ipw <- inverse_prob_method(X, 1)#
v_prime <- primePCA(X, 1, thresh_convergence=1e-4, trace.it=T)$V_cur
v_ipw
v_prime
set.seed(1)#
n <- 20#
d <- 4#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(10, rep(1, d - 1))))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X#
v_ipw <- inverse_prob_method(X, 1)#
v_prime <- primePCA(X, 1, thresh_convergence=1e-4, trace.it=T)$V_cur
v_ipw
v_prime
set.seed(2)#
n <- 20#
d <- 4#
p <- .5#
X <- matrix(rnorm(n * d), n, d)#
Sigma_sqrt <- diag(sqrt(c(10, rep(1, d - 1))))#
X_true <- X %*% Sigma_sqrt#
#
X <- X_true#
X[matrix(runif(n * d), n, d) > p] <- NA#
X#
v_ipw <- inverse_prob_method(X, 1)#
v_prime <- primePCA(X, 1, thresh_convergence=1e-4, trace.it=T)$V_cur
v_ipw
v_prime
a
sfn = save_file        #
    X_center = col_scale(X, center, normalize)#
    loss_all = rep(Inf, max_iter)#
    if (is.null(V_init)){#
        V_cur = inverse_prob_method(X_center, K, center=center, normalize=normalize)#
    }#
    else{#
        V_cur = V_init        #
    }
K <- 2#
V_init <- NULL#
thresh_sigma <- 10#
max_iter <- 1000#
thresh_convergence <- 1e-5#
trace.it <- F#
prob <- 1#
save_file <- ""#
center <- T#
normalize <- F
sfn = save_file        #
    X_center = col_scale(X, center, normalize)#
    loss_all = rep(Inf, max_iter)#
    if (is.null(V_init)){#
        V_cur = inverse_prob_method(X_center, K, center=center, normalize=normalize)#
    }#
    else{#
        V_cur = V_init        #
    }    #
    X_center = as(X_center, "RsparseMatrix")
X_center = col_scale(X, center, normalize)#
loss_all = rep(Inf, max_iter)#
if (is.null(V_init)){#
    V_cur = inverse_prob_method(X_center, K, center=center, normalize=normalize)#
}#
else{#
    V_cur = V_init        #
}    #
X_center = as(X_center, "RsparseMatrix")
X_center = col_scale(X, center, normalize)#
loss_all = rep(Inf, max_iter)#
if (is.null(V_init)){#
    V_cur = inverse_prob_method(X_center, K, center=center, normalize=normalize)#
}else{#
    V_cur = V_init        #
}    #
X_center = as(X_center, "RsparseMatrix")
Omega = get_omega(X_center)#
i = 0
50000 / 7.1
50000 / 7
12.8 / 18.8
6.65 / 10.69
4.37 / 6.9
a
4.18 / 6.88
2.93 / 3.64
3.5 ^ 2.5
e ^ -15
exp(-15)
log(10)
exp(-5)
110 * 20
110 * 20 / 60
d = 1777
d <- 1777#
z <- c()#
for (i in 1:1000){#
	x <- rnorm(d) #
	x <- x / sqrt(sum(x * x))#
	y <- rnorm(d)#
	y <- y / sqrt(sum(y * y))	#
	z <- c(z, abs(sum(x * y)))#
}#
mean(z)
110000/ 12
6000 * 9 + 12800 * 3
library(devtools)#
library(roxygen2)
?create
library(devtools)#
library(roxygen2)#
setwd("/Users/ziweizhu/Dropbox/BambooLab_Templates/R_package")#
devtools:create("primePCA")
library(devtools)#
library(roxygen2)#
setwd("/Users/ziweizhu/Dropbox/BambooLab_Templates/R_package")#
devtools::create("primePCA")
library(devtools)#
library(roxygen2)#
setwd("/Users/ziweizhu/Dropbox/BambooLab_Templates/R_package")#
devtools::create("primePCA")
?document
??document
getwd()
# Let's build the primePCA package!#
#
library(devtools)#
library(roxygen2)#
setwd("/Users/ziweizhu/Dropbox/BambooLab_Templates/R_package")#
devtools::create("primePCA")#
setwd("/Users/ziweizhu/Dropbox/BambooLab_Templates/R_package/primePCA") # In case the path is not switched to the package#
devtools::document()#
setwd("..")#
devtools::install("primePCA")
getwd()
a
devtools::install("primePCA")
setwd("..")
devtools::install("primePCA")
.Last.error.trace
# Let's build the primePCA package!#
#
library(devtools)#
library(roxygen2)#
setwd("/Users/ziweizhu/Dropbox/BambooLab_Templates/R_package")#
devtools::create("primePCA")#
setwd("/Users/ziweizhu/Dropbox/BambooLab_Templates/R_package/primePCA") # In case the path is not switched to the package#
devtools::document()#
setwd("..")#
devtools::install("primePCA")
library(devtools)#
library(roxygen2)#
setwd("/Users/ziweizhu/Dropbox/BambooLab_Templates/R_package")#
devtools::create("primePCA")
getwd()
ls
document()
setwd("..")
devtools::install("primePCA")
.Last.error.trace
install("primePCA")
check("primePCA")
──────────────────────────────────────────────── primePCA ──#
Setting env vars:#
● _R_CHECK_CRAN_INCOMING_REMOTE_: FALSE#
● _R_CHECK_CRAN_INCOMING_       : FALSE#
● _R_CHECK_FORCE_SUGGESTS_      : FALSE#
● NOT_CRAN                      : true#
── R CMD check ─────────────────────────────────────────────────────────────────────────────────────#
✔  checking package namespace information───── primePCA ──#
-  checking package dependencies ...
──────────────────────────────────────────────── primePCA ──#
Setting env vars:#
● _R_CHECK_CRAN_INCOMING_REMOTE_: FALSE#
● _R_CHECK_CRAN_INCOMING_       : FALSE#
● _R_CHECK_FORCE_SUGGESTS_      : FALSE#
● NOT_CRAN                      : true#
── R CMD check ─────────────────────────────────────────────────────────────────────────────────────#
✔  checking package namespace information───── primePCA ──#
-  checking package dependencies ...
check("primePCA")
check("primePCA")
getwd()
setwd("primePCA")
getwd()
document()
setwd("..")
install("primePCA")
.Last.error.trace
check("primePCA")
install("primePCA")
check("primePCA")
a
getwd()
setwd("primePCA")
